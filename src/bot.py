import discord
from discord.ext import commands
import os 
from dotenv import load_dotenv
from rag import setup_rag, query_rag
from log import log_activity
import time
from datetime import datetime
from collections import defaultdict
from google.api_core.exceptions import ResourceExhausted

# Load c√°c bi·∫øn t·ª´ file .env (g·ªìm API gemini key v√† discord token)
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
KB_path = r"D:\STUDY\DISCORD_BOT\Documents\information_client_basic.docx"

###### DISCORD BOT ########
'''
Trong discord.py th√¨ intents d√πng ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i s·ª± ki·ªán (events) m√† bot s·∫Ω nh·∫≠n ƒë∆∞·ª£c t·ª´ Discord
C·ª• th·ªÉ:
    - Trong Discord th√¨ s·∫Ω c√≥ nhi·ªÅu lo·∫°i s·ª± ki·ªán(events): nh∆∞ messages, ng∆∞·ªùi d√πng join server, change status...
    - ƒê·ªÉ t·ªëi ∆∞u v√† s·ª≠ d·ª•ng hi·ªáu qu·∫£ th√¨ c·∫ßn ph·∫£i b·∫≠t intents ph√π h·ª£p
'''
intents = discord.Intents.default() # B·∫≠t intents c∆° b·∫£n
intents.message_content = True 

# Kh·ªüi t·∫°o bot
bot = commands.Bot(command_prefix="@", intents=intents)

# Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ l∆∞u th·ªùi gian truy v·∫•n cu·ªëi c√πng c·ªßa m·ªói ng∆∞·ªùi
last_query_time = defaultdict(float)

# Status online c·ªßa chatbot
@bot.event
async def on_ready():
    print(f"Bot {bot.user} is ready!")
    bot.rag_chain = setup_rag(KB_path)

# Greeting new member
@bot.event
async def on_member_join(member):
    channel = member.guild.system_channel
    if channel is not None:
        await channel.send(f"Ch√†o m·ª´ng {member.mention} ƒë·∫øn v·ªõi server!")

# Tr√°nh repeat v√† tr√°nh hi·ªÉu l·∫ßm message l√† cmd
@bot.event 
async def on_message(message):
    if message.author == bot.user:
        return 
    elif message.content.strip() == bot.user.mention:
        await message.channel.send("T√¥i - QT_Bot ƒë√¢y ·≤òÔ∏µêëº")
        await message.channel.send("""\n‚úÖ `@hello` - ƒê·ªÉ ch√†o t√¥i \n‚úÖ `@talk <n·ªôi dung>` - Tr√≤ chuy·ªán c√πng bot\n‚úÖ `@addinfo <n·ªôi dung>` - B·ªï sung th√¥ng tin v√†o KB\n‚úÖ `@update` - C·∫≠p nh·∫≠t l·∫°i c∆° s·ªü tri th·ª©c\nV√≠ d·ª•: `@talk ƒê·ªó M·∫°nh ƒêoan l√† ai?`""")
        return 
    
    # Cho ph√©p x·ª≠ l√Ω c√°c l·ªánh kh√°c
    await bot.process_commands(message)

# Say hello
@bot.command(name="hello")
async def hello_command(ctx):
    await ctx.send("Xin ch√†o b·∫°n! T√¥i l√† QT_bot ƒë√¢y, r·∫•t vui v√¨ ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n")

 
'''
---------- Talk to QT_bot ----------
Input = Question or information which users want to talk
Return answer 
'''
@bot.command(name="talk")
async def talk_command(ctx, *, question):
    current_time = time.time()
    user_id = ctx.author.id
    if current_time - last_query_time[user_id] < 5:
        await ctx.send("Vui l√≤ng ch·ªù 5 gi√¢y tr∆∞·ªõc khi g·ª≠i c√¢u h·ªèi ti·∫øp theo.")
        return
    last_query_time[user_id] = current_time
    await ctx.send("ƒêang x·ª≠ l√Ω ‡™ú‚ÅÄ‚û¥ B·∫°n ch·ªù t√¥i ch√∫t nha! ‚Ä¢‚©ä‚Ä¢")
    try:
        response = query_rag(bot.rag_chain, question)
        fallback_trigger_phrases = [
            "t√¥i kh√¥ng t√¨m th·∫•y", "kh√¥ng r√µ", "kh√¥ng c√≥ th√¥ng tin", "t√¥i kh√¥ng bi·∫øt"
        ]
        if any(phrase in response.lower() for phrase in fallback_trigger_phrases):
            await ctx.send("Kh√¥ng t√¨m th·∫•y trong KB, ƒëang t√¨m ki·∫øn th·ª©c m·ªü r·ªông t·ª´ Gemini...")
            try:
                gemini_response = bot.rag_chain.invoke(question)  # D√πng rag_chain thay v√¨ llm_fallback
                if any(phrase in gemini_response.lower() for phrase in fallback_trigger_phrases):
                    await ctx.send(
                        "Xin l·ªói, c·∫£ KB v√† Gemini ƒë·ªÅu ch∆∞a c√≥ th√¥ng tin ph√π h·ª£p.\n"
                        "B·∫°n c√≥ th·ªÉ b·ªï sung ki·∫øn th·ª©c b·∫±ng l·ªánh:\n"
                        "`@addinfo <n·ªôi dung>` ƒë·ªÉ t√¥i h·ªçc v√† ph·ª•c v·ª• t·ªët h∆°n."
                    )
                    return
                else:
                    response = gemini_response
            except ResourceExhausted:
                await ctx.send("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n quota Gemini API. Vui l√≤ng th·ª≠ l·∫°i sau")
                return
            except Exception as e:
                await ctx.send(f"L·ªói khi truy v·∫•n Gemini: {str(e)}")
                return
        log_activity(ctx.author, question, response)
        MAX_MESSAGE_LENGTH = 1800
        if len(response) <= MAX_MESSAGE_LENGTH:
            await ctx.send(response)
        else:
            for i in range(0, len(response), MAX_MESSAGE_LENGTH):
                await ctx.send(response[i:i+MAX_MESSAGE_LENGTH])
        
    except Exception as e:
        await ctx.send(f"L·ªói: {str(e)}")

@bot.command(name="addinfo")
async def add_info_command(ctx, *, info):
    author_name = ctx.author.display_name.lower()
    info_lower = info.lower()
    
    # ∆Øu ti√™n
    self_identifiers = ["t√¥i", "l√† t√¥i", "l√† tao", "l√† t·ªõ", "l√† m√¨nh", "m√¨nh l√†", "ta l√†", author_name]
    if any(s in info_lower for s in self_identifiers):
        priority = "high"
    else:
        priority = "normal"
    
    if len(info.strip()) < 10:
        await ctx.send("Th√¥ng tin qu√° ng·∫Øn, vui l√≤ng cung c·∫•p chi ti·∫øt h∆°n (√≠t nh·∫•t 10 k√Ω t·ª±).")
        return

    forbidden_words = ["dcm", "dm", "cac"]
    if any(word in info.lower() for word in forbidden_words):
        await ctx.send("Th√¥ng tin ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p.")
        return

    # L∆∞u th√¥ng tin v√†o file txt log
    with open(r"D:\STUDY\DISCORD_BOT\Documents\user_contributions.txt", "a", encoding="utf-8") as f:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        f.write(f"[{timestamp}] {ctx.author} | Priority: {priority} | Info: {info}\n")

    # Update KB file (t√πy ch·ªçn, c√≥ th·ªÉ vi·∫øt append .docx ƒë·ªÉ bot t·ª± h·ªçc)
    from docx import Document
    doc = Document(KB_path)
    doc.add_paragraph(info)
    doc.save(KB_path)

    await ctx.send(f"C·∫£m ∆°n b·∫°n ƒë√£ cung c·∫•p th√¥ng tin! ∆Øu ti√™n: {priority}. Bot s·∫Ω c·∫≠p nh·∫≠t l·∫°i c∆° s·ªü tri th·ª©c.")

@bot.command(name="update")
async def update_command(ctx):
    await ctx.send("ƒêang c·∫≠p nh·∫≠t l·∫°i c∆° s·ªü tri th·ª©c...")
    try:
        bot.rag_chain = setup_rag(KB_path)
        await ctx.send("‚§∑ C·∫≠p nh·∫≠t c∆° s·ªü tri th·ª©c th√†nh c√¥ng!")
    except Exception as e:
        await ctx.send(f"L·ªói khi c·∫≠p nh·∫≠t: {str(e)}")
            
# H∆∞·ªõng d·∫´n
# @bot.command(name = "guild")
# async def help_command(ctx):
#     await ctx.send("D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh ƒë·ªÉ s·ª≠ d·ª•ng QT_Bot:\n")
#     await ctx.send("""
#     @hello - Ch√†o bot
#     @talk <n·ªôi dung> - Tr√≤ chuy·ªán c√πng bot
#     @update - C·∫≠p nh·∫≠t l·∫°i c∆° s·ªü tri th·ª©c
#     @guild - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
#     @addinfo <n·ªôi dung> - C·∫≠p nh·∫≠t th√¥ng tin v√†o kb
#     V√≠ d·ª• @talk ƒê·ªó M·∫°nh ƒêoan l√† th·∫±ng n√†o?
#     """)
     
bot.run(DISCORD_TOKEN)